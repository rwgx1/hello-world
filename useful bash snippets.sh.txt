Asynchronous bash script: http://wdocs.readthedocs.io/bash.html

mycommand &
child_pid=$!

while kill -0 $child_pid >/dev/null 2>&1; do
    echo "Child process is still running"
    sleep 1
done

echo "Child process has finished"
----------------------

Async/sync mode. Add ‘async=true’ before run script:

COMMAND="uptime"
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
VMS_IPS="192.168.1.1 192.168.1.2"
CHILD_PIDS=""

VM_NUM=0

for VM_IP in $VMS_IPS; do

        (( VM_NUM++ ))

        if [ "$async" == "true" ]; then
                ssh root@$VM_IP "$COMMAND" >> $SCRIPT_PATH/temp.$VM_NUM 2>&1 &
                CHILD_PIDS="$CHILD_PIDS $!"
        else
                ssh $SSH_USER@$VM_IP "$COMMAND"
        fi
done

if [ "$async" == "true" ]; then
        for CHILD_PID in $CHILD_PIDS; do
                while kill -0 $CHILD_PID >/dev/null 2>&1; do
                        echo "Processing in asynchronous mode..."
                        sleep 5.0
                done
        done

        cat $(ls -v temp.*)
        rm temp.*
fi

----------------------
Parsing script arguments:

#!/bin/sh
# Keeping options in alphabetical order makes it easy to add more.

while :
do
    case "$1" in
      -f | --file)
          file="$2"     # You may want to check validity of $2
          shift 2
          ;;

      -h | --help)
          display_help  # Call your function
          exit 0
          ;;

      -v | --verbose)
          verbose="verbose"
          shift
          ;;

      --)           # End of all options
          shift
          break;

      -*)
          echo "Error: Unknown option: $1" >&2
          exit 1
          ;;

      *)            # No more options
          break
          ;;
    esac
done

----------------------------------------------


Functions boolean returns:

# 1st variant
isdirectory() {
  if [ -d "$1" ]; then
    return 0
  else
    return 1
  fi
}

# 2nd variant
isdirectory() {
  if [ -d "$1" ]; then
    true
  else
    false
  fi
}

# 3rd variant
isdirectory() {
  [ -d "$1" ]
}

# USING
if isdirectory $1; then
    echo "is directory"
else
    echo "nopes"
fi
=============================================

BASH if grep exists statement:

if grep --quiet 'text' /path/to/file; then
  echo exists
else
  echo not found
fi
-------------------------------------------
If file exist:

if [ ! -f /tmp/foo.txt ]; then
    echo "File not found!"
fi


----------------------
Stdout/stderr redirects:

# Both threads (stdout/stderr) will be redirected to a file
<command> >file 2>&1

# Stdout to file. Stderr to terminal
<command> 2>&1 >file

---------------------------
Logical operators for if-then-else-fi construction:

-z $VAR         # string is empty
-n $VAR         # string isn't empty

$VAR =/== $VAR  # strings are equal
$VAR != $VAR    # strings aren't equal

-eq             # equal
-ne             # not equal

-lt(<)          # less
-le(<=)         # less or equal

-gt(>)          # more
-ge(>=)         # more or equal

!               # logical not
-a(&&)          # logical and
-o(||)          # logical or

-e <file>       # file exists
-d <file>       # file exists and is a directory
-f <file>       # is a regular file (not a directory or device file)
-b <file>       # file is a block device
-w <file>       # file exists and the write permission is granted
-x <file>       # file exists and the execute permission is granted
-r <file>       # file exists and the read permission is granted
-s <file>       # file exists and it's size is greater than zero (ie. it is not empty)
http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html

---------------------------------------------


Speedup Linux boot time
Check time of running services:

systemd-analyze blame

# also in visual view
systemd-analyze plot > graph.svf
Disable not needed services:

sudo systemctl stop <service_name>
sudo systemctl disable <service_name>
sudo systemctl daemon-reload


--------------------------------------------

Linux Mint 18 VNC Server # http://wdocs.readthedocs.io/linux_mint_vnc_server.html
# Remove the default Vino server
sudo apt-get -y remove vino

# Install x11vnc
sudo apt-get -y install x11vnc

# Create the directory for the password file
sudo mkdir /etc/x11vnc

# Create the encrypted password file. You will be asked to enter and verify the password. Then press Y to save the password file.
sudo x11vnc --storepasswd /etc/x11vnc/vncpwd

# Create the systemd service file for the x11vnc service
sudo xed /lib/systemd/system/x11vnc.service

    [Unit]
    Description=Start x11vnc at startup.
    After=multi-user.target

    [Service]
    Type=simple
    ExecStart=/usr/bin/x11vnc -auth guess -forever -noxdamage -repeat -rfbauth /etc/x11vnc/vncpwd -rfbport 5900 -shared

    [Install]
    WantedBy=multi-user.target

# Reload the services
sudo systemctl daemon-reload

# Enable the x11vnc service at boot time
sudo systemctl enable x11vnc.service

# Start the service
sudo systemctl start x11vnc.service
---------------------------------------------------------------

Low disk space alert
#!/bin/bash
CURRENT=$(df /data | grep / | awk '{ print $5}' | sed 's/%//g')
THRESHOLD=90

echo "$CURRENT"

if [ "$CURRENT" -gt "$THRESHOLD" ] ; then
    echo "Low Disk Space Alert: ${CURRENT}% used"
  mail -s 'Disk Space Alert' admin@gmail.com << EOF
Backup server remaining free space is critically low. Used: $CURRENT%
EOF
fi

-------------



